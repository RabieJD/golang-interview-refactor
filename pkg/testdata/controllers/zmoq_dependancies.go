// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package controllers

import (
	"context"
	"interview/pkg/controllers"
	"sync"
)

// CalculatorHandlerMock is a mock implementation of CalculatorHandler.
//
//	func TestSomethingThatUsesCalculatorHandler(t *testing.T) {
//
//		// make and configure a mocked CalculatorHandler
//		mockedCalculatorHandler := &CalculatorHandlerMock{
//			AddItemFunc: func(ctx context.Context, item controllers.CartItemForm, sessionID string) (int, error) {
//				panic("mock out the AddItem method")
//			},
//			DeleteItemFromCartFunc: func(ctx context.Context, itemID string, sessionID string) (int, error) {
//				panic("mock out the DeleteItemFromCart method")
//			},
//			GetCartDataFunc: func(ctx context.Context, sessionID string) ([]controllers.CartData, error) {
//				panic("mock out the GetCartData method")
//			},
//		}
//
//		// use mockedCalculatorHandler in code that requires CalculatorHandler
//		// and then make assertions.
//
//	}
type CalculatorHandlerMock struct {
	// AddItemFunc mocks the AddItem method.
	AddItemFunc func(ctx context.Context, item controllers.CartItemForm, sessionID string) (int, error)

	// DeleteItemFromCartFunc mocks the DeleteItemFromCart method.
	DeleteItemFromCartFunc func(ctx context.Context, itemID string, sessionID string) (int, error)

	// GetCartDataFunc mocks the GetCartData method.
	GetCartDataFunc func(ctx context.Context, sessionID string) ([]controllers.CartData, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddItem holds details about calls to the AddItem method.
		AddItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Item is the item argument value.
			Item controllers.CartItemForm
			// SessionID is the sessionID argument value.
			SessionID string
		}
		// DeleteItemFromCart holds details about calls to the DeleteItemFromCart method.
		DeleteItemFromCart []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemID is the itemID argument value.
			ItemID string
			// SessionID is the sessionID argument value.
			SessionID string
		}
		// GetCartData holds details about calls to the GetCartData method.
		GetCartData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SessionID is the sessionID argument value.
			SessionID string
		}
	}
	lockAddItem            sync.RWMutex
	lockDeleteItemFromCart sync.RWMutex
	lockGetCartData        sync.RWMutex
}

// AddItem calls AddItemFunc.
func (mock *CalculatorHandlerMock) AddItem(ctx context.Context, item controllers.CartItemForm, sessionID string) (int, error) {
	if mock.AddItemFunc == nil {
		panic("CalculatorHandlerMock.AddItemFunc: method is nil but CalculatorHandler.AddItem was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Item      controllers.CartItemForm
		SessionID string
	}{
		Ctx:       ctx,
		Item:      item,
		SessionID: sessionID,
	}
	mock.lockAddItem.Lock()
	mock.calls.AddItem = append(mock.calls.AddItem, callInfo)
	mock.lockAddItem.Unlock()
	return mock.AddItemFunc(ctx, item, sessionID)
}

// AddItemCalls gets all the calls that were made to AddItem.
// Check the length with:
//
//	len(mockedCalculatorHandler.AddItemCalls())
func (mock *CalculatorHandlerMock) AddItemCalls() []struct {
	Ctx       context.Context
	Item      controllers.CartItemForm
	SessionID string
} {
	var calls []struct {
		Ctx       context.Context
		Item      controllers.CartItemForm
		SessionID string
	}
	mock.lockAddItem.RLock()
	calls = mock.calls.AddItem
	mock.lockAddItem.RUnlock()
	return calls
}

// DeleteItemFromCart calls DeleteItemFromCartFunc.
func (mock *CalculatorHandlerMock) DeleteItemFromCart(ctx context.Context, itemID string, sessionID string) (int, error) {
	if mock.DeleteItemFromCartFunc == nil {
		panic("CalculatorHandlerMock.DeleteItemFromCartFunc: method is nil but CalculatorHandler.DeleteItemFromCart was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ItemID    string
		SessionID string
	}{
		Ctx:       ctx,
		ItemID:    itemID,
		SessionID: sessionID,
	}
	mock.lockDeleteItemFromCart.Lock()
	mock.calls.DeleteItemFromCart = append(mock.calls.DeleteItemFromCart, callInfo)
	mock.lockDeleteItemFromCart.Unlock()
	return mock.DeleteItemFromCartFunc(ctx, itemID, sessionID)
}

// DeleteItemFromCartCalls gets all the calls that were made to DeleteItemFromCart.
// Check the length with:
//
//	len(mockedCalculatorHandler.DeleteItemFromCartCalls())
func (mock *CalculatorHandlerMock) DeleteItemFromCartCalls() []struct {
	Ctx       context.Context
	ItemID    string
	SessionID string
} {
	var calls []struct {
		Ctx       context.Context
		ItemID    string
		SessionID string
	}
	mock.lockDeleteItemFromCart.RLock()
	calls = mock.calls.DeleteItemFromCart
	mock.lockDeleteItemFromCart.RUnlock()
	return calls
}

// GetCartData calls GetCartDataFunc.
func (mock *CalculatorHandlerMock) GetCartData(ctx context.Context, sessionID string) ([]controllers.CartData, error) {
	if mock.GetCartDataFunc == nil {
		panic("CalculatorHandlerMock.GetCartDataFunc: method is nil but CalculatorHandler.GetCartData was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		SessionID string
	}{
		Ctx:       ctx,
		SessionID: sessionID,
	}
	mock.lockGetCartData.Lock()
	mock.calls.GetCartData = append(mock.calls.GetCartData, callInfo)
	mock.lockGetCartData.Unlock()
	return mock.GetCartDataFunc(ctx, sessionID)
}

// GetCartDataCalls gets all the calls that were made to GetCartData.
// Check the length with:
//
//	len(mockedCalculatorHandler.GetCartDataCalls())
func (mock *CalculatorHandlerMock) GetCartDataCalls() []struct {
	Ctx       context.Context
	SessionID string
} {
	var calls []struct {
		Ctx       context.Context
		SessionID string
	}
	mock.lockGetCartData.RLock()
	calls = mock.calls.GetCartData
	mock.lockGetCartData.RUnlock()
	return calls
}
